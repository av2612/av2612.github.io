{"version":3,"sources":["utils/csvDataHelper.js","components/CSVReaderWrapper.jsx","components/Search.jsx","utils/searchHelper.js","App.js","reportWebVitals.js","index.js"],"names":["papaparseOptions","header","dynamicTyping","skipEmptyLines","transformHeader","toLowerCase","replace","CSVReaderWrapper","props","data","length","cssClass","label","onFileLoaded","csvMap","tableData","row","filter","csvData","map","columns","Object","keys","c","Header","accessor","Cell","data-tip","value","stateHandler","parserOptions","Search","useState","search","setSearch","selected","setSelected","items","searchKey","i","toString","includes","filterSearch","options","type","placeholder","style","border","borderRadius","paddingRight","position","minHeight","maxHeight","width","onChange","e","event","keyword","target","searchSpace","disableSearch","defaultPageSize","className","onPageSizeChange","ReactTooltip","rebuild","App","setData","setColumns","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9cb368a4.chunk.js","sourcesContent":["export const processDataUsingCsvReader = (csvMap) => {\n    csvMap = csvMap.filter((csvData) => {\n        delete csvData[\"\"];\n        return csvData;\n    }).map(data => {\n        return data\n    });\n    let headers = Object.keys(csvMap[0]);\n    const columns = headers.map(c => ({\n        Header: c,\n        accessor: c,\n        Cell: (row) => {\n            /* Add data-tip */\n            return <span data-tip={row.value}>{row.value}</span>;\n        }\n    }));\n    return {row: csvMap, columns:columns};\n}\n\nexport const papaparseOptions = {\n    header: true,\n    dynamicTyping: true,\n    skipEmptyLines: true,\n    transformHeader: header => header.toLowerCase().replace(/\\W/g, \"_\")\n};","import CSVReader from \"react-csv-reader\";\nimport { processDataUsingCsvReader, papaparseOptions } from \"../utils/csvDataHelper\"\n\nfunction CSVReaderWrapper(props) {\n    // const handle = props.stateHandler;\n\n    // handle file upload\n    const handleFileUpload = (data) => {\n        let tableData = processDataUsingCsvReader(data);\n        props.stateHandler(tableData.row, tableData.columns);\n    }\n    if (props.data && props.data.length === 0) {\n        return <CSVReader\n            cssClass=\"react-csv-input\"\n            label=\"Upload Csv File to process\"\n            onFileLoaded={handleFileUpload}\n            parserOptions={papaparseOptions}\n        ></CSVReader>\n    }\n    return <></>\n}\n\nexport default CSVReaderWrapper;","import React, { useState } from 'react';\nimport ReactTable from 'react-table';\nimport ReactTooltip from \"react-tooltip\";\nimport { filterSearch } from \"../utils/searchHelper\";\nimport MultiSelect from \"react-multi-select-component\";\nimport \"react-table/react-table.css\";\n\nfunction Search(props) {\n\n    const [search, setSearch] = useState([]);\n    const [selected, setSelected] = useState([]);\n\n    const searchSpace = (event) => {\n        let keyword = event.target.value;\n        setSearch(keyword)\n    }\n\n    const elementStyle = {\n        border: 'solid',\n        borderRadius: '10px',\n        paddingRight: '10px',\n        position: 'relative',\n        minHeight: '30px',\n        maxHeight: '50px',\n        width: '99%',\n\n    }\n\n    const items = props.data.filter((data) => {\n\n        if (!search || search.length === 0)\n            return data\n        else if (filterSearch(search, data, selected, props.columns)) {\n            return data;\n        }\n        return null\n    }).map(data => {\n        return data\n    });\n\n    const options = props.columns.map(c => ({\n        label: c.Header,\n        value: c.Header,\n    }));\n\n\n    return (\n        <div>\n            <span>\n                <input type=\"text\" placeholder=\"Enter any individual field value selected in filter(if selected none it will search on all fields)\" style={elementStyle} onChange={(e) => searchSpace(e)} />\n                <label>Filter</label>\n                <MultiSelect\n                    options={options}\n                    value={selected}\n                    onChange={setSelected}\n                    disableSearch={true}\n                /></span>\n            <br />\n            <br />\n            <h2>CSV Data</h2>\n            <ReactTable\n                data={items}\n                columns={props.columns}\n                defaultPageSize={10}\n                className=\"-striped -highlight\"\n                onPageSizeChange={() => {\n                    ReactTooltip.rebuild();\n                }}\n            />\n            <ReactTooltip />\n        </div>\n    )\n}\n\nexport default Search;\n","export const filterSearch = (searchKey, data, filter, columns) => {\n    if (filter.length > 0) {\n      for (let i = 0; i < filter.length; i++) {\n        if (data[filter[i].label] && data[filter[i].label].toString().toLowerCase().includes(searchKey.toLowerCase())) {\n          return true;\n        }\n      }\n    } else {\n      for (let i = 0; i < columns.length; i++) {\n        if (data[columns[0].Header].toLowerCase().includes(searchKey.toLowerCase())) {\n          return true;\n        }\n      }\n    }\n\n  }","import React, { useState } from 'react';\nimport CSVReaderWrapper from \"./components/CSVReaderWrapper\";\nimport Search from './components/Search';\n\nfunction App() {\n  const [data, setData] = useState([]);\n  const [columns, setColumns] = useState([]);\n\n  const stateHandler = (data, columns) => {\n    setData(data);\n    setColumns(columns);\n  }\n\n  return (\n    <div>\n      <h1>Multi Filter Search</h1>\n      <CSVReaderWrapper\n        data={data}\n        stateHandler={stateHandler}\n      />\n      {data.length>0?<Search\n        columns={columns}\n        data={data}\n      />:<></>}\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}